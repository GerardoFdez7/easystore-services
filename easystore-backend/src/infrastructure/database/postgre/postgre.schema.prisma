generator postgresClient {
  provider        = "prisma-client-js"
  output          = "../../../../node_modules/.prisma/postgres"
  previewFeatures = ["multiSchema"]
}

datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
  schemas  = ["tenant", "inventory", "pricing", "sales", "customer", "common", "geography"]
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "./erd.svg"
  theme                     = "default"
  ignoreEnums               = true
  includeRelationFromFields = true
  disabled                  = false
  tableOnly                 = false
}

// Tenant schema models
model Tenant {
  id                       Int             @id @default(autoincrement())
  businessName             String          @unique
  ownerName                String
  domain                   String          @unique
  logo                     String?
  description              String?         @postgres.Text
  authIdentityId           Int             @unique
  defaultPhoneNumberId     Int?            @unique
  defaultShippingAddressId Int?            @unique
  defaultBillingAddressId  Int?            @unique
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  roles                    EmployeeRole[]
  warehouses               Warehouse[]
  promotions               Promotion[]
  customers                Customer[]
  addresses                Address[]
  phoneNumbers             PhoneNumber[]
  Order                    Order[]
  paymentMethods           PaymentMethod[]
  Subscription             Subscription?
  authIdentity             AuthIdentity    @relation("TenantAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  defaultPhoneNumber       PhoneNumber?    @relation("TenantDefaultPhone", fields: [defaultPhoneNumberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultShippingAddress   Address?        @relation("TenantDefaultShippingAddress", fields: [defaultShippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultBillingAddress    Address?        @relation("TenantDefaultBillingAddress", fields: [defaultBillingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("tenant")
}

model Subscription {
  id        Int                @id @default(autoincrement())
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime
  planId    Int
  tenantId  Int                @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  tenant    Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  Plan      Plan               @relation(fields: [planId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  payments  Payment[]

  @@schema("tenant")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED

  @@schema("tenant")
}

model Plan {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  description  String
  price        Decimal
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription Subscription[]

  @@schema("tenant")
}

model EmployeeRole {
  id           Int            @id @default(autoincrement())
  role         String
  tenantId     Int
  employees    Employee[]
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  roleFeatures RoleFeatures[]

  @@schema("tenant")
}

model RoleFeatures {
  id           Int          @id @default(autoincrement())
  roleId       Int
  featureId    Int
  employeeRole EmployeeRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("tenant")
}

model Feature {
  id           Int            @id @default(autoincrement())
  code         String         @unique // "REPORTS", "ORDERS" 
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  roleFeatures RoleFeatures[]

  @@schema("tenant")
}

model Employee {
  id             Int             @id @default(autoincrement())
  name           String
  roleId         Int
  authIdentityId Int             @unique
  role           EmployeeRole    @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  authIdentity   AuthIdentity    @relation("EmployeeAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  StockMovement  StockMovement[]

  @@schema("tenant")
}

// Inventory schema models
model Warehouse {
  id             Int             @id @default(autoincrement())
  name           String
  addressId      Int
  tenantId       Int
  stockMovements StockMovement[]
  tenant         Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address        Address         @relation(fields: [addressId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("inventory")
}

// Pending
model StockMovement {
  id          Int       @id @default(autoincrement())
  variantId   Int
  warehouseId Int
  deltaQty    Int
  reason      String    @postgres.Text
  createdById Int?
  ocurredAt   DateTime  @default(now())
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy   Employee? @relation(fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("inventory")
}

// Pricing schema models
model Promotion {
  id                        Int                       @id @default(autoincrement())
  tenantId                  Int
  name                      String
  description               String
  type                      PromotionType
  params                    Json
  startDate                 DateTime
  endDate                   DateTime
  createdAt                 DateTime                  @default(now())
  updatedAt                 DateTime                  @updatedAt
  promotionProducts         PromotionProduct[]
  promotionCategories       PromotionCategory[]
  promotionBuyGets          PromotionBuyGet[]
  promotionBuyGetCategories PromotionBuyGetCategory[]
  scheduleTasks             ScheduleTask[]
  coupons                   Coupon[]
  carts                     Cart[]
  cartItems                 CartItem[]
  tenant                    Tenant                    @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("pricing")
}

enum PromotionType {
  PERCENTAGE
  FIXEDGROUP
  BUNDLE
  BUY_X_GET_Y

  @@schema("pricing")
}

model PromotionProduct {
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId Int
  productId   String
  bundleQty   Int

  @@id([promotionId, productId])
  @@schema("pricing")
}

model PromotionCategory {
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId Int
  categoryId  String

  @@id([promotionId, categoryId])
  @@schema("pricing")
}

model PromotionBuyGet {
  promotion    Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId  Int
  buyProductId String
  getProductId String

  @@id([promotionId, buyProductId, getProductId])
  @@schema("pricing")
}

model PromotionBuyGetCategory {
  promotion     Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId   Int
  buyCategoryId String
  getCategoryId String

  @@id([promotionId, buyCategoryId, getCategoryId])
  @@schema("pricing")
}

model ScheduleTask {
  id          Int        @id @default(autoincrement())
  promotion   Promotion  @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotionId Int
  type        Action
  payload     Json
  runAt       DateTime
  status      TaskStatus
  createdAt   DateTime   @default(now())

  @@schema("pricing")
}

enum Action {
  APPLY_PROMO
  REVERT_PROMO

  @@schema("pricing")
}

enum TaskStatus {
  PENDING
  DONE
  FAILED

  @@schema("pricing")
}

model Coupon {
  id               Int           @id @default(autoincrement())
  promotion        Promotion     @relation(fields: [promotionId], references: [id])
  promotionId      Int
  code             String        @unique
  customer         Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customerId       Int?
  usageLimit       Int?
  perCustomerLimit Int           @default(1)
  usedCount        Int           @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  couponUsages     CouponUsage[]
  carts            Cart[]

  @@schema("pricing")
}

model CouponUsage {
  id       Int      @id @default(autoincrement())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  couponId Int
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId  Int
  usedAt   DateTime @default(now())

  @@schema("pricing")
}

// Sales schema models
model Cart {
  id          Int        @id @default(autoincrement())
  customerId  Int
  couponId    Int?
  promotionId Int?
  cartItems   CartItem[]
  orders      Order[]
  coupon      Coupon?    @relation(fields: [couponId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  customer    Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotion   Promotion? @relation(fields: [promotionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("sales")
}

model CartItem {
  id          Int        @id @default(autoincrement())
  qty         Int
  productId   String
  cartId      Int
  promotionId Int?
  updatedAt   DateTime   @updatedAt
  cart        Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotion   Promotion? @relation(fields: [promotionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("sales")
}

model Order {
  id           Int           @id @default(autoincrement())
  orderNumber  String
  status       OrderStatus
  totalAmount  Decimal
  customerId   Int
  cartId       Int
  addressId    Int
  tenantId     Int
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  orderDetails OrderDetail[]
  returns      Return[]
  payments     Payment[]
  couponUsages CouponUsage[]
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  cart         Cart          @relation(fields: [cartId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address      Address       @relation(fields: [addressId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([tenantId, orderNumber])
  @@schema("sales")
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELLED

  @@schema("sales")
}

model OrderDetail {
  id          Int      @id @default(autoincrement())
  productName String
  qty         Int
  unitPrice   Decimal
  subtotal    Decimal
  orderId     Int
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("sales")
}

model Return {
  id           Int      @id @default(autoincrement())
  returnReason String   @postgres.Text
  refundAmount Decimal
  productId    String
  orderId      Int
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("sales")
}

model Payment {
  id              Int           @id @default(autoincrement())
  amount          Decimal
  status          Status
  transactionId   String?
  orderId         Int?
  paymentMethodId Int
  subscriptionId  Int?
  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
  order           Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Subscription    Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("sales")
}

enum Status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED

  @@schema("sales")
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String
  tenantId   Int?
  customerId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tenant     Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payments   Payment[]

  @@schema("sales")
}

// Customer schema models
model Customer {
  id                       Int                     @id @default(autoincrement())
  name                     String
  tenantId                 Int
  authIdentityId           Int                     @unique
  defaultPhoneNumberId     Int?                    @unique
  defaultShippingAddressId Int?                    @unique
  defaultBillingAddressId  Int?                    @unique
  updatedAt                DateTime                @updatedAt
  createdAt                DateTime                @default(now())
  wishLists                WishList[]
  customerReviewProducts   CustomerReviewProduct[]
  addresses                Address[]
  phoneNumbers             PhoneNumber[]
  coupons                  Coupon[]
  carts                    Cart[]
  orders                   Order[]
  paymentMethods           PaymentMethod[]
  tenant                   Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authIdentity             AuthIdentity            @relation("CustomerAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  defaultPhoneNumber       PhoneNumber?            @relation("CustomerDefaultPhone", fields: [defaultPhoneNumberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultShippingAddress   Address?                @relation("CustomerDefaultShippingAddress", fields: [defaultShippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultBillingAddress    Address?                @relation("CustomerDefaultBillingAddress", fields: [defaultBillingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("customer")
}

model WishList {
  id         Int      @id @default(autoincrement())
  customerId Int
  productId  String
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("customer")
}

model CustomerReviewProduct {
  id          Int      @id @default(autoincrement())
  ratingCount Float
  comment     String   @postgres.Text
  customerId  Int
  productId   String
  createdDate DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("customer")
}

// Common schema models
model PhoneNumber {
  id                 Int       @id @default(autoincrement())
  number             String
  customerId         Int?
  tenantId           Int?
  defaultForTenant   Tenant?   @relation("TenantDefaultPhone")
  defaultForCustomer Customer? @relation("CustomerDefaultPhone")
  customer           Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant             Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("common")
}

model Address {
  id                         Int          @id @default(autoincrement())
  name                       String
  addressLine1               String
  addressLine2               String?
  postalCode                 String?
  city                       String
  countryId                  Int
  addressType                AddressTypes
  deliveryNum                String?
  tenantId                   Int?
  customerId                 Int?
  warehouses                 Warehouse[]
  orders                     Order[]
  country                    Country      @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tenant                     Tenant?      @relation(fields: [tenantId], references: [id])
  customer                   Customer?    @relation(fields: [customerId], references: [id])
  defaultShippingForTenant   Tenant?      @relation("TenantDefaultShippingAddress")
  defaultBillingForTenant    Tenant?      @relation("TenantDefaultBillingAddress")
  defaultShippingForCustomer Customer?    @relation("CustomerDefaultShippingAddress")
  defaultBillingForCustomer  Customer?    @relation("CustomerDefaultBillingAddress")

  @@schema("common")
}

enum AddressTypes {
  SHIPPING
  BILLING
  WAREHOUSE

  @@schema("common")
}

model AuthIdentity {
  id             Int         @id @default(autoincrement())
  email          String
  password       String
  accountType    AccountType
  isActive       Boolean     @default(true)
  emailVerified  Boolean     @default(false)
  lastLoginAt    DateTime?
  failedAttempts Int         @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenant         Tenant?     @relation("TenantAuth")
  customer       Customer?   @relation("CustomerAuth")
  employee       Employee?   @relation("EmployeeAuth")

  @@schema("common")
}

enum AccountType {
  TENANT
  CUSTOMER
  EMPLOYEE

  @@schema("common")
}

// Geography schema models
model Country {
  id        Int       @id @default(autoincrement())
  name      String
  code      String
  states    State[]
  addresses Address[]

  @@schema("geography")
}

model State {
  id        Int     @id @default(autoincrement())
  name      String
  code      String
  countryId Int
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("geography")
}
