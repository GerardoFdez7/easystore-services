import { z } from 'zod';

enum ProductCurrency {
  AFN,
  ALL,
  EUR,
  DZD,
  AOA,
  XCD,
  SAR,
  ARS,
  AMD,
  AWG,
  AUD,
  AZN,
  BSD,
  BDT,
  BBD,
  BHD,
  BZD,
  XOF,
  BMD,
  BYR,
  MMK,
  BOB,
  BOV,
  USD,
  BAM,
  BWP,
  BRL,
  BND,
  BGN,
  BIF,
  BTN,
  INR,
  CVE,
  KHR,
  XAF,
  CAD,
  CLF,
  CLP,
  CNY,
  COP,
  COU,
  KMF,
  CDF,
  CRC,
  HRK,
  CUC,
  CUP,
  ANG,
  DKK,
  EGP,
  SVC,
  AED,
  ERN,
  ETB,
  FJD,
  PHP,
  XDR,
  GMD,
  GEL,
  GHS,
  GIP,
  GNF,
  GYD,
  HTG,
  HNL,
  HKD,
  HUF,
  IDR,
  IQD,
  NOK,
  ISK,
  KYD,
  FKP,
  SBD,
  ILS,
  JMD,
  JPY,
  GBP,
  JOD,
  KZT,
  KES,
  KGS,
  KWD,
  LSL,
  ZAR,
  LRD,
  LYD,
  CHF,
  LBP,
  MOP,
  MKD,
  MGA,
  MYR,
  MWK,
  MVR,
  MAD,
  MUR,
  MRO,
  MNT,
  MZN,
  MXN,
  MXV,
  NAD,
  NPR,
  NIO,
  NGN,
  NZD,
  XPF,
  OMR,
  XUA,
  PKR,
  PAB,
  PGK,
  PYG,
  PEN,
  PLN,
  QAR,
  LAK,
  VEF,
  CZK,
  KRW,
  MDL,
  KPW,
  DOP,
  IRR,
  TZS,
  SYP,
  RWF,
  RON,
  RUB,
  WST,
  STD,
  RSD,
  SCR,
  SLL,
  SGD,
  XSU,
  SOS,
  LKR,
  SZL,
  SDG,
  SSP,
  SEK,
  CHE,
  CHW,
  SRD,
  THB,
  TWD,
  TJS,
  TOP,
  TTD,
  TMT,
  TRY,
  TND,
  UGX,
  UAH,
  UYI,
  UYU,
  UZS,
  VUV,
  VND,
  YER,
  DJF,
  ZMW,
  ZWL,
}

const currencySchema = z.nativeEnum(ProductCurrency);

export class Currency {
  private readonly value: Currency;

  private constructor(value: Currency) {
    this.value = value;
  }

  public static create(type: string): Currency {
    const validatedType = currencySchema.parse(type as unknown as Currency);
    return new Currency(validatedType as unknown as Currency);
  }

  public getValue(): Currency {
    return this.value;
  }

  public equals(currency: Currency): boolean {
    return this.value === currency.value;
  }
}
