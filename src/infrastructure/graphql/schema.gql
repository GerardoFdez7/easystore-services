# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AccountTypeEnum {
  CUSTOMER
  EMPLOYEE
  TENANT
}

input AddStockToWarehouseInput {
  estimatedReplenishmentDate: DateTime
  lotNumber: String
  productLocation: String
  qtyAvailable: Int!
  qtyReserved: Int
  serialNumbers: [String!]
}

input AddVariantToProductInput {
  attributes: [CreateAttributeInput!]!
  barcode: String
  condition: ConditionEnum = NEW
  dimension: CreateDimensionInput
  ean: String
  installmentPayments: [CreateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  sku: String
  upc: String
  variantCover: String
  variantMedia: [CreateMediaInput!]
  warranties: [CreateWarrantyInput!]
  weight: Float
}

type AddressType {
  addressLine1: String!
  addressLine2: String!
  addressType: AddressTypeEnum!
  city: String!
  countryId: ID!
  deliveryNum: String!
  name: String!
  postalCode: String!
}

"""Types of addresses"""
enum AddressTypeEnum {
  BILLING
  SHIPPING
  WAREHOUSE
}

type AddressesType {
  addresses: [AddressType!]!
}

type Attribute {
  key: String!
  value: String!
}

type AuthIdentity {
  accountType: AccountTypeEnum!
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  failedAttempts: Int!
  isActive: Boolean!
  lastLoginAt: DateTime
  lockedUntil: DateTime
  updatedAt: DateTime!
}

input AuthenticationInput {
  accountType: AccountTypeEnum!
  email: String!
  password: String!
}

type Category {
  cover: String!
  createdAt: DateTime!
  description: String!
  name: String!
  subCategories: [Category!]!
  updatedAt: DateTime!
}

enum ConditionEnum {
  NEW
  REFURBISHED
  USED
}

input CreateAddressInput {
  addressLine1: String!
  addressLine2: String
  addressType: AddressTypeEnum!
  city: String!
  countryId: ID!
  deliveryNum: String
  name: String!
  postalCode: String
}

input CreateAttributeInput {
  key: String!
  value: String!
}

input CreateCategoryInput {
  cover: String
  description: String
  name: String!
  parentId: ID
  subCategories: [CreateCategoryInput!]
}

input CreateDimensionInput {
  height: Float!
  length: Float!
  width: Float!
}

input CreateInstallmentInput {
  interestRate: Float!
  months: Int!
}

input CreateMediaInput {
  mediaType: MediaTypeEnum!
  position: Int!
  url: String!
}

input CreateProductCategoryInput {
  categoryId: ID!
}

input CreateProductInput {
  brand: String
  categories: [CreateProductCategoryInput!]
  cover: String
  longDescription: String
  manufacturer: String
  media: [CreateMediaInput!]
  name: String!
  productType: TypeEnum
  shortDescription: String!
  sustainabilities: [CreateSustainabilityInput!]
  tags: [String!]
  variants: [AddVariantToProductInput!]!
}

input CreateSustainabilityInput {
  certification: String!
  recycledPercentage: Float!
}

input CreateVariantInput {
  attributes: [CreateAttributeInput!]!
  barcode: String
  condition: ConditionEnum = NEW
  dimension: CreateDimensionInput
  ean: String
  installmentPayments: [CreateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  productId: ID!
  sku: String
  upc: String
  variantCover: String
  variantMedia: [CreateMediaInput!]
  warranties: [CreateWarrantyInput!]
  weight: Float
}

input CreateWarehouseInput {
  addressId: ID!
  name: String!
}

input CreateWarrantyInput {
  coverage: String!
  instructions: String!
  months: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Dimension {
  height: Float!
  length: Float!
  width: Float!
}

input ForgotPasswordInput {
  accountType: AccountTypeEnum!
  email: String!
}

type Installment {
  interestRate: Float!
  months: Int!
}

type Media {
  mediaType: MediaTypeEnum!
  position: Int!
  productId: ID
  url: String!
  variantId: ID
}

enum MediaTypeEnum {
  IMAGE
  VIDEO
}

type Mutation {
  addStockToWarehouse(input: AddStockToWarehouseInput!, reason: String, variantId: ID!, warehouseId: ID!): Warehouse!
  addVariant(input: CreateVariantInput!): Product!
  archiveVariant(id: String!, productId: String!): Product!
  createAddress(input: CreateAddressInput!): AddressType!
  createCategory(input: CreateCategoryInput!): Category!
  createProduct(input: CreateProductInput!): Product!
  createWarehouse(input: CreateWarehouseInput!): Warehouse!
  deleteAddress(id: ID!): AddressType!
  deleteCategory(id: ID!): Category!
  forgotPassword(input: ForgotPasswordInput!): Response!
  deleteWarehouse(id: ID!): Warehouse!
  hardDeleteProduct(id: String!): Product!
  login(input: AuthenticationInput!): Response!
  logout: Response!
  register(input: AuthenticationInput!): AuthIdentity!
  removeStockFromWarehouse(reason: String, stockId: ID!, warehouseId: ID!): Warehouse!
  removeVariant(id: String!, productId: String!): Product!
  restoreProduct(id: String!): Product!
  restoreVariant(id: String!, productId: String!): Product!
  softDeleteProduct(id: String!): Product!
  updateAddress(id: ID!, input: UpdateAddressInput!): AddressType!
  updateCategory(id: ID!, input: UpdateCategoryInput!): Category!
  updateProduct(id: String!, input: UpdateProductInput!): Product!
  updateStockInWarehouse(input: UpdateStockInWarehouseInput!, reason: String, stockId: ID!, warehouseId: ID!): Warehouse!
  updateVariant(id: String!, input: UpdateVariantInput!, productId: String!): Product!
  updateWarehouse(id: ID!, input: UpdateWarehouseInput!): Warehouse!
}

type PaginatedCategoriesType {
  categories: [Category!]!
  hasMore: Boolean!
  total: Int!
}

type PaginatedProductsType {
  hasMore: Boolean!
  products: [Product!]!
  total: Int!
}

type PaginatedStockMovementsType {
  hasMore: Boolean!
  stockMovements: [StockMovement!]!
  total: Int!
}

type PaginatedWarehousesType {
  hasMore: Boolean!
  total: Int!
  warehouses: [Warehouse!]!
}

type Product {
  brand: String
  categories: [ProductCategory!]
  cover: String!
  createdAt: DateTime!
  isArchived: Boolean!
  longDescription: String
  manufacturer: String
  media: [Media!]
  name: String!
  productType: TypeEnum!
  shortDescription: String!
  sustainabilities: [Sustainability!]
  tags: [String!]
  updatedAt: DateTime!
  variants: [Variant!]
}

type ProductCategory {
  categoryId: ID!
}

type Query {
  getAddressById(id: ID!): AddressType!
  getAllAddresses(addressType: AddressTypeEnum): AddressesType!
  getAllCategories(includeSubcategories: Boolean = true, limit: Int = 10, name: String, page: Int = 1, parentId: ID, sortBy: SortBy, sortOrder: SortOrder): PaginatedCategoriesType!
  getAllProducts(categoriesIds: [Int!], includeSoftDeleted: Boolean = false, limit: Float = 25, name: String, page: Float = 1, sortBy: SortBy, sortOrder: SortOrder, type: TypeEnum): PaginatedProductsType!
  getAllStockMovements(createdById: ID, dateFrom: DateTime, dateTo: DateTime, includeDeleted: Boolean = false, limit: Int = 10, page: Int = 1, sortBy: SortBy, sortOrder: SortOrder, variantId: ID, warehouseId: ID!): PaginatedStockMovementsType!
  getAllWarehouses(addressId: ID, limit: Int = 10, lowStockThreshold: Int, name: String, page: Int = 1, sortBy: SortBy, sortOrder: SortOrder, variantId: ID): PaginatedWarehousesType!
  getCategoryById(id: ID!): Category!
  getProductById(id: String!): Product!
  getWarehouseById(id: ID!): Warehouse!
  validateToken: Response!
}

type Response {
  message: String!
  success: Boolean!
}

enum SortBy {
  CREATED_AT
  NAME
  UPDATED_AT
}

enum SortOrder {
  ASC
  DESC
}

type StockMovement {
  deltaQty: Int!
  id: ID!
  occurredAt: DateTime!
  reason: String!
  warehouseId: ID!
}

type StockPerWarehouse {
  estimatedReplenishmentDate: DateTime
  id: ID!
  lotNumber: String
  productLocation: String
  qtyAvailable: Int!
  qtyReserved: Int!
  serialNumbers: [String!]
  warehouseId: ID!
}

type Sustainability {
  certification: String!
  recycledPercentage: Float!
}

enum TypeEnum {
  DIGITAL
  PHYSICAL
}

input UpdateAddressInput {
  addressLine1: String
  addressLine2: String
  addressType: AddressTypeEnum
  city: String
  countryId: ID
  deliveryNum: String
  name: String
  postalCode: String
}

input UpdateAttributeInput {
  key: String
  value: String
}

input UpdateCategoryInput {
  cover: String
  description: String
  name: String
  parentId: ID
  subCategories: [UpdateCategoryInput!]
}

input UpdateDimensionInput {
  height: Float
  length: Float
  width: Float
}

input UpdateInstallmentInput {
  interestRate: Float
  months: Int
}

input UpdateMediaInput {
  mediaType: MediaTypeEnum
  position: Int
  url: String
}

input UpdateProductCategoryInput {
  categoryId: ID
}

input UpdateProductInput {
  brand: String
  categories: [UpdateProductCategoryInput!]
  cover: String
  longDescription: String
  manufacturer: String
  media: [UpdateMediaInput!]
  name: String
  productType: TypeEnum
  shortDescription: String
  sustainabilities: [UpdateSustainabilityInput!]
  tags: [String!]
}

input UpdateStockInWarehouseInput {
  estimatedReplenishmentDate: DateTime
  lotNumber: String
  productLocation: String
  qtyAvailable: Int
  qtyReserved: Int
  serialNumbers: [String!]
}

input UpdateSustainabilityInput {
  certification: String
  recycledPercentage: Float
}

input UpdateVariantInput {
  attributes: [UpdateAttributeInput!]
  barcode: String
  condition: ConditionEnum
  dimension: UpdateDimensionInput
  ean: String
  installmentPayments: [UpdateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float
  sku: String
  upc: String
  variantCover: String
  variantMedia: [UpdateMediaInput!]
  warranties: [UpdateWarrantyInput!]
  weight: Float
}

input UpdateWarehouseInput {
  addressId: ID
  name: String
}

input UpdateWarrantyInput {
  coverage: String
  instructions: String
  months: Float
}

type Variant {
  attributes: [Attribute!]!
  barcode: String
  condition: ConditionEnum!
  dimension: Dimension
  ean: String
  installmentPayments: [Installment!]
  isArchived: Boolean
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  sku: String
  upc: String
  variantCover: String
  variantMedia: [Media!]
  warranties: [Warranty!]
  weight: Float
}

type Warehouse {
  addressId: ID!
  createdAt: DateTime!
  id: ID!
  name: String!
  stockPerWarehouses: [StockPerWarehouse!]!
  updatedAt: DateTime!
}

type Warranty {
  coverage: String!
  instructions: String!
  months: Float!
}