# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AccountTypeEnum {
  CUSTOMER
  EMPLOYEE
  TENANT
}

input AddItemToCartInput {
  promotionId: ID
  variantId: ID!
}

input AddStockToWarehouseInput {
  estimatedReplenishmentDate: DateTime
  lotNumber: String
  productLocation: String
  qtyAvailable: Int!
  qtyReserved: Int
  serialNumbers: [String!]
}

input AddVariantToProductInput {
  attributes: [CreateAttributeInput!]!
  barcode: String
  condition: ConditionEnum = NEW
  dimension: CreateDimensionInput
  ean: String
  installmentPayments: [CreateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  sku: String!
  upc: String
  variantCover: String
  variantMedia: [CreateMediaInput!]
  warranties: [CreateWarrantyInput!]
  weight: Float
}

type AddressType {
  addressLine1: String!
  addressLine2: String
  addressType: AddressTypeEnum!
  city: String!
  countryId: String!
  deliveryInstructions: String
  deliveryNum: String!
  id: ID!
  name: String!
  postalCode: String!
  stateId: String!
}

"""Types of addresses"""
enum AddressTypeEnum {
  BILLING
  SHIPPING
  WAREHOUSE
}

type Attribute {
  key: String!
  value: String!
}

type AuthIdentity {
  accountType: AccountTypeEnum!
  createdAt: DateTime!
  email: String!
  emailVerified: Boolean!
  failedAttempts: Int!
  isActive: Boolean!
  lastLoginAt: DateTime
  lockedUntil: DateTime
  updatedAt: DateTime!
}

input AuthenticationInput {
  accountType: AccountTypeEnum!
  email: String!
  password: String!
}

type Cart {
  cartItems: [CartItem!]!
  customerId: ID!
  id: ID!
}

type CartItem {
  id: ID!
  promotionId: ID
  qty: Int!
  updatedAt: DateTime!
  variantId: ID!
}

type Category {
  cover: String!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  parentId: ID
  subCategories: [Category!]!
  updatedAt: DateTime!
}

enum ConditionEnum {
  NEW
  REFURBISHED
  USED
}

type CountryType {
  code: String!
  id: ID!
  name: String!
}

input CreateAddressInput {
  addressLine1: String!
  addressLine2: String
  addressType: AddressTypeEnum!
  city: String!
  countryId: String!
  deliveryInstructions: String
  deliveryNum: String!
  name: String!
  postalCode: String!
  stateId: String!
}

input CreateAttributeInput {
  key: String!
  value: String!
}

input CreateCartInput {
  customerId: ID!
}

input CreateCategoryInput {
  cover: String!
  description: String
  name: String!
  parentId: ID
  subCategories: [CreateCategoryInput!]
}

input CreateDimensionInput {
  height: Float!
  length: Float!
  width: Float!
}

input CreateInstallmentInput {
  interestRate: Float!
  months: Int!
}

input CreateMediaInput {
  mediaType: MediaTypeEnum!
  position: Int!
  url: String!
}

input CreatePaymentCredentialsInput {
  pagaditoCredentials: PagaditoCredentialsInput
  paypalCredentials: PaypalCredentialsInput
  providerType: String!
  tenantId: String!
  visanetCredentials: VisanetCredentialsInput
}

input CreateProductCategoryInput {
  categoryId: ID!
}

input CreateProductInput {
  brand: String
  categories: [CreateProductCategoryInput!]
  cover: String!
  longDescription: String
  manufacturer: String
  media: [CreateMediaInput!]
  name: String!
  productType: TypeEnum
  shortDescription: String!
  sustainabilities: [CreateSustainabilityInput!]
  tags: [String!]
  variants: [AddVariantToProductInput!]!
}

input CreateSustainabilityInput {
  certification: String!
  recycledPercentage: Float!
}

input CreateVariantInput {
  attributes: [CreateAttributeInput!]!
  barcode: String
  condition: ConditionEnum = NEW
  dimension: CreateDimensionInput
  ean: String
  installmentPayments: [CreateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  productId: ID!
  sku: String!
  upc: String
  variantCover: String
  variantMedia: [CreateMediaInput!]
  warranties: [CreateWarrantyInput!]
  weight: Float
}

input CreateWarehouseInput {
  addressId: ID!
  name: String!
}

input CreateWarrantyInput {
  coverage: String!
  instructions: String!
  months: Float!
}

enum CurrencyCodes {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BOV
  BRL
  BSD
  BTN
  BWP
  BYR
  BZD
  CAD
  CDF
  CHE
  CHF
  CHW
  CLF
  CLP
  CNY
  COP
  COU
  CRC
  CUC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MXV
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SLL
  SOS
  SRD
  SSP
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYI
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XDR
  XOF
  XPF
  XSU
  XUA
  YER
  ZAR
  ZMW
  ZWL
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeletePaymentCredentialsInput {
  providerType: String!
  tenantId: String!
}

type Dimension {
  height: Float!
  length: Float!
  width: Float!
}

input ForgotPasswordInput {
  accountType: AccountTypeEnum!
  email: String!
}

input GetInTouchInput {
  annualRevenue: String!
  businessEmail: String!
  businessPhone: String!
  company: String!
  country: String!
  fullName: String!
  isAgency: String!
  websiteUrl: String
}

input InitiatePaymentInput {
  allowPendingPayments: Boolean
  amount: Float!
  card: PaymentCardInput
  currency: String!
  customParams: String
  details: [PaymentDetailInput!]
  externalReferenceNumber: String
  orderId: String!
  providerType: String!
  tenantId: String!
}

type Installment {
  interestRate: Float!
  months: Int!
}

type Media {
  mediaType: MediaTypeEnum!
  position: Int!
  productId: ID
  url: String!
  variantId: ID
}

type MediaAuthResponse {
  expire: Float!
  publicKey: String!
  signature: String!
  token: String!
}

enum MediaTypeEnum {
  IMAGE
  VIDEO
}

type Mutation {
  addItemToCart(input: AddItemToCartInput!): Cart!
  addStockToWarehouse(input: AddStockToWarehouseInput!, reason: String, variantId: ID!, warehouseId: ID!): Warehouse!
  addVariant(input: CreateVariantInput!): Product!
  archiveVariant(id: String!, productId: String!): Product!
  completePayment(paymentId: String!, providerType: String!, tenantId: String!): PaymentResultOutput!
  createAddress(input: CreateAddressInput!): AddressType!
  createCart(input: CreateCartInput!): Cart!
  createCategory(input: CreateCategoryInput!): Category!
  createPaymentCredentials(input: CreatePaymentCredentialsInput!): Boolean!
  createProduct(input: CreateProductInput!): Product!
  createWarehouse(input: CreateWarehouseInput!): Warehouse!
  deleteAddress(id: ID!): AddressType!
  deleteCategory(id: ID!): Category!
  deletePaymentCredentials(input: DeletePaymentCredentialsInput!): Boolean!
  deleteWarehouse(id: ID!): Warehouse!
  forgotPassword(input: ForgotPasswordInput!): Response!
  getInTouch(input: GetInTouchInput!): Response!
  hardDeleteProduct(id: String!): Product!
  initiatePayment(input: InitiatePaymentInput!): PaymentResultOutput!
  login(input: AuthenticationInput!): Response!
  logout: Response!
  refundPayment(amount: Float, paymentId: String!, providerType: String!, tenantId: String!): PaymentResultOutput!
  register(input: AuthenticationInput!): AuthIdentity!
  removeItemFromCart(input: RemoveItemFromCartInput!): Cart!
  removeManyItemsFromCart(input: RemoveManyItemFromCartInput!): Cart!
  removeStockFromWarehouse(reason: String, stockId: ID!, warehouseId: ID!): Warehouse!
  removeVariant(id: String!, productId: String!): Product!
  restoreProduct(id: String!): Product!
  restoreVariant(id: String!, productId: String!): Product!
  softDeleteProduct(id: String!): Product!
  updateAddress(id: ID!, input: UpdateAddressInput!): AddressType!
  updateCategory(id: ID!, input: UpdateCategoryInput!): Category!
  updateItemQty(input: UpdateItemQtyInput!): Cart!
  updatePassword(input: UpdatePasswordInput!): Response!
  updatePaymentCredentials(input: UpdatePaymentCredentialsInput!): Boolean!
  updateProduct(id: String!, input: UpdateProductInput!): Product!
  updateStockInWarehouse(input: UpdateStockInWarehouseInput!, reason: String, stockId: ID!, warehouseId: ID!): Warehouse!
  updateTenant(input: UpdateTenantInput!): Tenant!
  updateVariant(id: String!, input: UpdateVariantInput!, productId: String!): Product!
  updateWarehouse(id: ID!, input: UpdateWarehouseInput!): Warehouse!
}

input PagaditoCredentialsInput {
  sandbox: Boolean
  uid: String!
  wsk: String!
}

type PaginatedAddressesType {
  addresses: [AddressType!]!
  hasMore: Boolean!
  total: Int!
}

type PaginatedCategoriesType {
  categories: [Category!]!
  hasMore: Boolean!
  total: Int!
}

type PaginatedProductsType {
  hasMore: Boolean!
  products: [Product!]!
  total: Int!
}

type PaginatedStockMovementsType {
  hasMore: Boolean!
  stockMovements: [StockMovement!]!
  total: Int!
}

type PaginatedWarehousesType {
  hasMore: Boolean!
  total: Int!
  warehouses: [Warehouse!]!
}

input PaymentCardInput {
  address: String
  capture: Boolean
  cardNumber: String!
  city: String
  country: String
  cvv: String!
  email: String
  expirationDate: String!
  firstName: String
  lastName: String
  phoneNumber: String
  postalCode: String
  state: String
}

type PaymentCredentialsResponse {
  createdAt: DateTime!
  id: String!
  isActive: Boolean!
  providerType: String!
  tenantId: String!
  updatedAt: DateTime!
}

input PaymentDetailInput {
  description: String!
  price: Float!
  quantity: Float!
  urlProduct: String
}

type PaymentResultOutput {
  checkoutUrl: String
  correlationId: String
  environment: String
  error: String
  status: String
  success: Boolean!
  transactionId: String
}

input PaypalCredentialsInput {
  clientId: String!
  clientSecret: String!
}

type Product {
  brand: String
  categories: [ProductCategory!]
  cover: String!
  createdAt: DateTime!
  id: ID!
  isArchived: Boolean!
  longDescription: String
  manufacturer: String
  media: [Media!]
  name: String!
  productType: TypeEnum!
  shortDescription: String!
  sustainabilities: [Sustainability!]
  tags: [String!]
  updatedAt: DateTime!
  variants: [Variant!]
}

type ProductCategory {
  categoryId: ID!
  categoryName: String
}

type Query {
  getAddressById(id: ID!): AddressType!
  getAllAddresses(addressType: AddressTypeEnum, limit: Int, name: String, page: Int): PaginatedAddressesType!
  getAllCategories(includeSubcategories: Boolean = true, limit: Int = 10, name: String, page: Int = 1, parentId: ID, sortBy: SortBy, sortOrder: SortOrder): PaginatedCategoriesType!
  getAllCountries: [CountryType!]!
  getAllProducts(categoriesIds: [ID!], includeSoftDeleted: Boolean = false, limit: Float = 25, name: String, page: Float = 1, sortBy: SortBy, sortOrder: SortOrder, type: TypeEnum): PaginatedProductsType!
  getAllStockMovements(createdById: ID, dateFrom: DateTime, dateTo: DateTime, includeDeleted: Boolean = false, limit: Int = 10, page: Int = 1, sortBy: SortBy, sortOrder: SortOrder, variantId: ID, warehouseId: ID!): PaginatedStockMovementsType!
  getAllWarehouses(addressId: ID, includeAddresses: Boolean = false, isArchived: Boolean, limit: Int = 10, lowStockThreshold: Int, name: String, page: Int = 1, sortBy: SortBy, sortOrder: SortOrder, variantId: ID): PaginatedWarehousesType!
  getCart: Cart!
  getCategoryById(id: ID!): Category!
  getMediaUploadToken: MediaAuthResponse!
  getPayment(paymentId: String!, tenantId: String!): String
  getPaymentCredentials(providerType: String, tenantId: String!): [PaymentCredentialsResponse!]!
  getProductById(id: String!): Product!
  getStatesByCountryId(countryId: ID!): [StateType!]!
  getTenantById: Tenant!
  getWarehouseById(id: ID!, isArchived: Boolean): Warehouse!
  listPayments(limit: Float, offset: Float, tenantId: String!): String
  validateToken: Response!
}

input RemoveItemFromCartInput {
  variantId: ID!
}

input RemoveManyItemFromCartInput {
  variantIds: [ID!]!
}

type Response {
  message: String!
  success: Boolean!
}

enum SortBy {
  CREATED_AT
  NAME
  UPDATED_AT
}

enum SortOrder {
  ASC
  DESC
}

type StateType {
  code: String!
  id: ID!
  name: String!
}

type StockMovement {
  deltaQty: Int!
  id: ID!
  occurredAt: DateTime!
  productName: String
  reason: String!
  variantFirstAttribute: VariantAttribute
  variantSku: String
  warehouseId: ID!
}

type StockPerWarehouse {
  estimatedReplenishmentDate: DateTime
  id: ID!
  lotNumber: String
  productLocation: String
  productName: String
  qtyAvailable: Int!
  qtyReserved: Int!
  serialNumbers: [String!]
  variantFirstAttribute: VariantAttribute
  variantId: ID!
  variantSku: String
  warehouseId: ID!
}

type Sustainability {
  certification: String!
  recycledPercentage: Float!
}

type Tenant {
  businessName: String
  createdAt: DateTime!
  currency: CurrencyCodes!
  defaultBillingAddressId: ID
  defaultPhoneNumberId: ID
  defaultShippingAddressId: ID
  description: String
  domain: String
  email: String!
  logo: String
  ownerName: String!
  updatedAt: DateTime!
}

enum TypeEnum {
  DIGITAL
  PHYSICAL
}

input UpdateAddressInput {
  addressLine1: String
  addressLine2: String
  addressType: AddressTypeEnum
  city: String
  countryId: String
  deliveryInstructions: String
  deliveryNum: String
  name: String
  postalCode: String
  stateId: String
}

input UpdateAttributeInput {
  key: String
  value: String
}

input UpdateCategoryInput {
  cover: String
  description: String
  name: String
  parentId: ID
  subCategories: [UpdateCategoryInput!]
}

input UpdateDimensionInput {
  height: Float
  length: Float
  width: Float
}

input UpdateInstallmentInput {
  interestRate: Float
  months: Int
}

input UpdateItemQtyInput {
  quantity: Int!
  variantId: ID!
}

input UpdateMediaInput {
  mediaType: MediaTypeEnum
  position: Int
  url: String
}

input UpdatePasswordInput {
  password: String!
  token: String!
}

input UpdatePaymentCredentialsInput {
  pagaditoCredentials: PagaditoCredentialsInput
  paypalCredentials: PaypalCredentialsInput
  providerType: String!
  tenantId: String!
  visanetCredentials: VisanetCredentialsInput
}

input UpdateProductCategoryInput {
  categoryId: ID
}

input UpdateProductInput {
  brand: String
  categories: [UpdateProductCategoryInput!]
  cover: String
  longDescription: String
  manufacturer: String
  media: [UpdateMediaInput!]
  name: String
  productType: TypeEnum
  shortDescription: String
  sustainabilities: [UpdateSustainabilityInput!]
  tags: [String!]
}

input UpdateStockInWarehouseInput {
  estimatedReplenishmentDate: DateTime
  lotNumber: String
  productLocation: String
  qtyAvailable: Int
  qtyReserved: Int
  serialNumbers: [String!]
}

input UpdateSustainabilityInput {
  certification: String
  recycledPercentage: Float
}

input UpdateTenantInput {
  businessName: String
  currency: CurrencyCodes
  defaultBillingAddressId: ID
  defaultPhoneNumberId: ID
  defaultShippingAddressId: ID
  description: String
  domain: String
  logo: String
  ownerName: String
}

input UpdateVariantInput {
  attributes: [UpdateAttributeInput!]
  barcode: String
  condition: ConditionEnum
  dimension: UpdateDimensionInput
  ean: String
  installmentPayments: [UpdateInstallmentInput!]
  isbn: String
  personalizationOptions: [String!]
  price: Float
  sku: String
  upc: String
  variantCover: String
  variantMedia: [UpdateMediaInput!]
  warranties: [UpdateWarrantyInput!]
  weight: Float
}

input UpdateWarehouseInput {
  addressId: ID
  name: String
}

input UpdateWarrantyInput {
  coverage: String
  instructions: String
  months: Float
}

type Variant {
  attributes: [Attribute!]!
  barcode: String
  condition: ConditionEnum!
  dimension: Dimension
  ean: String
  id: ID!
  installmentPayments: [Installment!]
  isArchived: Boolean
  isbn: String
  personalizationOptions: [String!]
  price: Float!
  sku: String!
  upc: String
  variantCover: String
  variantMedia: [Media!]
  warranties: [Warranty!]
  weight: Float
}

type VariantAttribute {
  key: String!
  value: String!
}

input VisanetCredentialsInput {
  environment: String!
  merchantId: String!
  merchantKeyId: String!
  merchantSecretKey: String!
}

type Warehouse {
  addressId: ID!
  addressLine1: String
  city: String
  countryCode: String
  createdAt: DateTime!
  id: ID!
  name: String!
  postalCode: String
  stockPerWarehouses: [StockPerWarehouse!]!
  updatedAt: DateTime!
}

type Warranty {
  coverage: String!
  instructions: String!
  months: Float!
}