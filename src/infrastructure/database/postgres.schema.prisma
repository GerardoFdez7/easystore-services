generator postgresClient {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.prisma/postgres"
}

datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
  schemas  = ["tenant", "inventory", "product", "shipping", "pricing", "sales", "customer", "common", "geography"]
}

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "./erd.svg"
//   theme                     = "default"
//   ignoreEnums               = true
//   includeRelationFromFields = true
//   disabled                  = true
//   tableOnly                 = false
// }

// Tenant schema models
model Tenant {
  id                       String          @id
  businessName             String?
  ownerName                String
  domain                   String?         @unique
  logo                     String?
  description              String?         @postgres.Text
  currency                 Currency
  authIdentityId           String          @unique
  defaultPhoneNumberId     String?         @unique
  defaultShippingAddressId String?         @unique
  defaultBillingAddressId  String?         @unique
  updatedAt                DateTime        @updatedAt
  createdAt                DateTime        @default(now())
  roles                    EmployeeRole[]
  warehouses               Warehouse[]
  promotions               Promotion[]
  customers                Customer[]
  addresses                Address[]
  phoneNumbers             PhoneNumber[]
  orders                   Order[]
  paymentMethods           PaymentMethod[]
  products                 Product[]
  variants                 Variant[]
  categories               Category[]
  taxRates                 TaxRate[]
  shippingRules            ShippingRule[]
  shippmentRates           ShipmentRate[]
  coupons                  Coupon[]
  subscription             Subscription?
  authIdentity             AuthIdentity    @relation("TenantAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  defaultPhoneNumber       PhoneNumber?    @relation("TenantDefaultPhone", fields: [defaultPhoneNumberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultShippingAddress   Address?        @relation("TenantDefaultShippingAddress", fields: [defaultShippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultBillingAddress    Address?        @relation("TenantDefaultBillingAddress", fields: [defaultBillingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("tenant")
}

enum Currency {
  AFN
  ALL
  EUR
  DZD
  AOA
  XCD
  SAR
  ARS
  AMD
  AWG
  AUD
  AZN
  BSD
  BDT
  BBD
  BHD
  BZD
  XOF
  BMD
  BYR
  MMK
  BOB
  BOV
  USD
  BAM
  BWP
  BRL
  BND
  BGN
  BIF
  BTN
  INR
  CVE
  KHR
  XAF
  CAD
  CLF
  CLP
  CNY
  COP
  COU
  KMF
  CDF
  CRC
  HRK
  CUC
  CUP
  ANG
  DKK
  EGP
  SVC
  AED
  ERN
  ETB
  FJD
  PHP
  XDR
  GMD
  GEL
  GHS
  GIP
  GNF
  GTQ
  GYD
  HTG
  HNL
  HKD
  HUF
  IDR
  IQD
  NOK
  ISK
  KYD
  FKP
  SBD
  ILS
  JMD
  JPY
  GBP
  JOD
  KZT
  KES
  KGS
  KWD
  LSL
  ZAR
  LRD
  LYD
  CHF
  LBP
  MOP
  MKD
  MGA
  MYR
  MWK
  MVR
  MAD
  MUR
  MRO
  MNT
  MZN
  MXN
  MXV
  NAD
  NPR
  NIO
  NGN
  NZD
  XPF
  OMR
  XUA
  PKR
  PAB
  PGK
  PYG
  PEN
  PLN
  QAR
  LAK
  VEF
  CZK
  KRW
  MDL
  KPW
  DOP
  IRR
  TZS
  SYP
  RWF
  RON
  RUB
  WST
  STD
  RSD
  SCR
  SLL
  SGD
  XSU
  SOS
  LKR
  SZL
  SDG
  SSP
  SEK
  CHE
  CHW
  SRD
  THB
  TWD
  TJS
  TOP
  TTD
  TMT
  TRY
  TND
  UGX
  UAH
  UYI
  UYU
  UZS
  VUV
  VND
  YER
  DJF
  ZMW
  ZWL

  @@schema("tenant")
}

model Subscription {
  id        String             @id
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime
  planId    String
  tenantId  String             @unique
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  tenant    Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Restrict)
  Plan      Plan               @relation(fields: [planId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  payments  Payment[]

  @@schema("tenant")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED

  @@schema("tenant")
}

model Plan {
  id           String         @id
  name         String         @unique
  description  String
  price        Decimal
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  subscription Subscription[]

  @@schema("tenant")
}

model Employee {
  id             String          @id
  name           String
  roleId         String
  authIdentityId String          @unique
  role           EmployeeRole    @relation(fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  authIdentity   AuthIdentity    @relation("EmployeeAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  StockMovement  StockMovement[]

  @@schema("tenant")
}

model EmployeeRole {
  id           String         @id
  role         String
  tenantId     String
  tenant       Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  employees    Employee[]
  roleFeatures RoleFeatures[]

  @@schema("tenant")
}

model RoleFeatures {
  id           String       @id
  roleId       String
  featureId    String
  employeeRole EmployeeRole @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feature      Feature      @relation(fields: [featureId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("tenant")
}

model Feature {
  id           String         @id
  code         String         @unique // "REPORTS", "ORDERS" 
  name         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  roleFeatures RoleFeatures[]

  @@schema("tenant")
}

// Inventory schema models
model Warehouse {
  id                 String              @id
  name               String
  addressId          String
  tenantId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  tenant             Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  address            Address             @relation(fields: [addressId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  stockMovements     StockMovement[]
  stockPerWarehouses StockPerWarehouse[]

  @@unique([tenantId, name])
  @@unique([tenantId, addressId])
  @@schema("inventory")
}

model StockMovement {
  id                  String            @id
  deltaQty            Int
  reason              String            @postgres.Text
  createdById         String?
  warehouseId         String
  stockPerWarehouseId String
  occurredAt          DateTime          @default(now())
  warehouse           Warehouse         @relation(fields: [warehouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy           Employee?         @relation(fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  StockPerWarehouse   StockPerWarehouse @relation(fields: [stockPerWarehouseId], references: [id])

  @@schema("inventory")
}

model StockPerWarehouse {
  id                         String          @id
  qtyAvailable               Int             @default(0)
  qtyReserved                Int             @default(0)
  productLocation            String?
  estimatedReplenishmentDate DateTime?
  lotNumber                  String?
  serialNumbers              String[]
  variantId                  String
  warehouseId                String
  deletedAt                  DateTime?
  stockMovements             StockMovement[]
  variant                    Variant         @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  warehouse                  Warehouse       @relation(fields: [warehouseId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([warehouseId, variantId])
  @@schema("inventory")
}

// Shipping schema models
model ShippingRule {
  id             String           @id
  type           ShippingRuleType
  slug           String
  description    String
  isEnabled      Boolean          @default(true)
  priority       Int?
  conditions     Json?
  tenantId       String
  variantId      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  shippmentRates ShipmentRate[]
  tenant         Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant        Variant?         @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, slug])
  @@unique([tenantId, priority])
  @@index([tenantId, type])
  @@schema("shipping")
}

enum ShippingRuleType {
  METHOD
  RESTRICTION

  @@schema("shipping")
}

model ShipmentRate {
  id                String            @id
  fixedRate         Float
  description       String?
  calculationMethod CalculationMethod
  data              Json?
  shippingRuleId    String
  countryId         String
  stateId           String?
  tenantId          String
  country           Country           @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  state             State?            @relation(fields: [stateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  shippingRule      ShippingRule      @relation(fields: [shippingRuleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant            Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, shippingRuleId, countryId, stateId], name: "unique_tenant_method_rate")
  @@index([tenantId, shippingRuleId])
  @@schema("shipping")
}

enum CalculationMethod {
  FIXED
  WEIGHT
  VOLUME
  WEIGHT_AND_VOLUME

  @@schema("shipping")
}

// Product schema models
model TaxRate {
  id         String    @id
  rate       Float
  countryId  String
  stateId    String?
  categoryId String?
  tenantId   String
  tenant     Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country    Country   @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  state      State?    @relation(fields: [stateId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([tenantId, countryId, stateId, categoryId], name: "tenant_cannot_have_the_same_tax_rate_config")
  @@schema("product")
}

model Category {
  id            String              @id
  name          String
  cover         String
  description   String?
  subCategories Category[]          @relation("Subcategory")
  parentId      String?
  tenantId      String
  updatedAt     DateTime            @updatedAt
  createdAt     DateTime            @default(now())
  taxRate       TaxRate[]
  products      ProductCategories[]
  parent        Category?           @relation("Subcategory", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  tenant        Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, name])
  @@index([parentId])
  @@schema("product")
}

model ProductCategories {
  id         String   @id
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

model Product {
  id               String              @id
  name             String
  shortDescription String
  longDescription  String?             @postgres.Text
  productType      ProductType
  cover            String
  brand            String?
  manufacturer     String?
  tags             String[]
  isArchived       Boolean             @default(false)
  tenantId         String
  updatedAt        DateTime            @updatedAt
  createdAt        DateTime            @default(now())
  media            Media[]
  variants         Variant[]
  categories       ProductCategories[]
  sustainabilities Sustainability[]
  tenant           Tenant              @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, name])
  @@schema("product")
}

enum ProductType {
  PHYSICAL
  DIGITAL

  @@schema("product")
}

model Media {
  id        String    @id
  url       String
  position  Int
  mediaType MediaType
  productId String?
  variantId String?
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Variant   Variant?  @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, position])
  @@unique([variantId, position])
  @@schema("product")
}

enum MediaType {
  IMAGE
  VIDEO

  @@schema("product")
}

model InstallmentPayment {
  id           String  @id
  months       Int
  interestRate Float
  variantId    String
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

model Sustainability {
  id                 String  @id
  certification      String?
  recycledPercentage Float
  productId          String
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

model Warranty {
  id           String  @id
  months       Int
  coverage     String
  instructions String
  variantId    String
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

model Variant {
  id                     String                  @id
  price                  Decimal                 @default(0)
  variantCover           String?
  personalizationOptions String[]
  weight                 Float?
  dimension              Dimension?
  condition              ProductCondition
  upc                    String?                 @unique
  ean                    String?                 @unique
  isbn                   String?                 @unique
  barcode                String?
  sku                    String
  isArchived             Boolean                 @default(false)
  productId              String
  tenantId               String
  updatedAt              DateTime                @updatedAt
  createdAt              DateTime                @default(now())
  attributes             Attribute[]
  stockPerWarehouses     StockPerWarehouse[]
  variantMedia           Media[]
  installmentPayments    InstallmentPayment[]
  warranties             Warranty[]
  specificShippingRules  ShippingRule[]
  wishList               WishList[]
  returns                Return[]
  ordersDetails          OrderDetail[]
  customersReviews       CustomerReviewProduct[]
  cartItems              CartItem[]
  product                Product                 @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant                 Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, sku])
  @@unique([tenantId, barcode])
  @@schema("product")
}

model Attribute {
  id        String  @id
  key       String
  value     String
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

model Dimension {
  id        String  @id
  length    Float
  width     Float
  height    Float
  variantId String  @unique
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("product")
}

enum ProductCondition {
  NEW
  USED
  REFURBISHED

  @@schema("product")
}

// Pricing schema models
model Promotion {
  id              String               @id
  name            String
  description     String
  type            PromotionType
  actionType      PromotionActionType?
  actionValue     Decimal?
  isStackable     Boolean              @default(false)
  params          Json
  priority        Int
  startDate       DateTime
  endDate         DateTime
  isArchived      Boolean              @default(false)
  updatedAt       DateTime             @updatedAt
  createdAt       DateTime             @default(now())
  tenantId        String
  coupons         Coupon[]
  cartItems       CartItem[]
  orderPromotions OrderPromotions[]
  cartPromotions  CartPromotions[]
  tenant          Tenant               @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, name])
  @@unique([tenantId, priority])
  @@schema("pricing")
}

enum PromotionType {
  BUY_X_GET_DISCOUNT_ON_Y
  STORE_ATTRIBUTE
  PRODUCT_ATTRIBUTE
  BUY_X_GET_Y
  FIXED_GROUP
  COUPON
  BUNDLE

  @@schema("pricing")
}

enum PromotionActionType {
  PERCENTAGE
  FIXED

  @@schema("pricing")
}

model Coupon {
  id               String        @id
  code             String
  usageLimit       Int?
  perCustomerLimit Int           @default(1)
  usedCount        Int           @default(0)
  promotionId      String
  customerId       String?
  tenantId         String
  updatedAt        DateTime      @updatedAt
  createdAt        DateTime      @default(now())
  couponUsages     CouponUsage[]
  promotion        Promotion     @relation(fields: [promotionId], references: [id])
  customer         Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tenant           Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([tenantId, code])
  @@schema("pricing")
}

model CouponUsage {
  id       String   @id
  couponId String
  orderId  String
  usedAt   DateTime @default(now())
  coupon   Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([orderId, couponId])
  @@schema("pricing")
}

model CartPromotions {
  id          String    @id
  cartId      String
  promotionId String
  cart        Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("pricing")
}

model OrderPromotions {
  id          String    @id
  orderId     String
  promotionId String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("pricing")
}

// Sales schema models
model Cart {
  id             String           @id
  customerId     String
  cartItems      CartItem[]
  orders         Order[]
  customer       Customer         @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  CartPromotions CartPromotions[]

  @@schema("sales")
}

model CartItem {
  id          String     @id
  qty         Int
  variantId   String
  cartId      String
  promotionId String?
  updatedAt   DateTime   @updatedAt
  cart        Cart       @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  promotion   Promotion? @relation(fields: [promotionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  variant     Variant    @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("sales")
}

model Order {
  id              String            @id
  orderNumber     String
  status          OrderStatus
  totalAmount     Decimal
  customerId      String
  cartId          String
  addressId       String
  tenantId        String
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  orderDetails    OrderDetail[]
  returns         Return[]
  payments        Payment[]
  orderPromotions OrderPromotions[]
  couponUsages    CouponUsage[]
  customer        Customer          @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  cart            Cart              @relation(fields: [cartId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  address         Address           @relation(fields: [addressId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@unique([tenantId, orderNumber])
  @@schema("sales")
}

enum OrderStatus {
  PROCESSING
  CONFIRMED
  SHIPPED
  COMPLETED
  CANCELLED

  @@schema("sales")
}

model OrderDetail {
  id          String   @id
  productName String
  qty         Int
  unitPrice   Decimal
  subtotal    Decimal
  orderId     String
  variantId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  variant     Variant  @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("sales")
}

model Return {
  id           String   @id
  returnReason String   @postgres.Text
  refundAmount Decimal
  variantId    String
  orderId      String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  variant      Variant  @relation(fields: [variantId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("sales")
}

model Payment {
  id              String        @id
  amount          Decimal
  status          Status
  transactionId   String?
  orderId         String
  paymentMethodId String
  subscriptionId  String
  updatedAt       DateTime      @updatedAt
  createdAt       DateTime      @default(now())
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  Subscription    Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@schema("sales")
}

enum Status {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED

  @@schema("sales")
}

model PaymentMethod {
  id                     String                  @id
  acceptedPaymentMethods AcceptedPaymentMethod[]
  tenantId               String?
  customerId             String?
  updatedAt              DateTime                @updatedAt
  createdAt              DateTime                @default(now())
  tenant                 Tenant?                 @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer               Customer?               @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  payments               Payment[]

  @@schema("sales")
}

enum AcceptedPaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  BANK_TRANSFER
  PAYPAL
  PAYMENT_ON_DELIVERY
  INSTALLMENTS

  @@schema("sales")
}

// Customer schema models
model Customer {
  id                       String                  @id
  name                     String
  tenantId                 String
  authIdentityId           String                  @unique
  defaultPhoneNumberId     String?                 @unique
  defaultShippingAddressId String?                 @unique
  defaultBillingAddressId  String?                 @unique
  updatedAt                DateTime                @updatedAt
  createdAt                DateTime                @default(now())
  wishLists                WishList[]
  customerReviewProducts   CustomerReviewProduct[]
  addresses                Address[]
  phoneNumbers             PhoneNumber[]
  coupons                  Coupon[]
  carts                    Cart[]
  orders                   Order[]
  paymentMethods           PaymentMethod[]
  tenant                   Tenant                  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authIdentity             AuthIdentity            @relation("CustomerAuth", fields: [authIdentityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  defaultPhoneNumber       PhoneNumber?            @relation("CustomerDefaultPhone", fields: [defaultPhoneNumberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultShippingAddress   Address?                @relation("CustomerDefaultShippingAddress", fields: [defaultShippingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  defaultBillingAddress    Address?                @relation("CustomerDefaultBillingAddress", fields: [defaultBillingAddressId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@schema("customer")
}

model WishList {
  id         String   @id
  variantId  String
  customerId String
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant    Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("customer")
}

model CustomerReviewProduct {
  id          String   @id
  ratingCount Float
  comment     String   @postgres.Text
  customerId  String
  variantId   String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variant     Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("customer")
}

// Common schema models
model PhoneNumber {
  id                 String    @id
  number             String
  customerId         String?
  tenantId           String?
  defaultForTenant   Tenant?   @relation("TenantDefaultPhone")
  defaultForCustomer Customer? @relation("CustomerDefaultPhone")
  customer           Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenant             Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("common")
}

model Address {
  id                         String       @id
  name                       String
  addressLine1               String
  addressLine2               String?
  postalCode                 String
  city                       String
  countryId                  String
  stateId                    String
  addressType                AddressTypes
  deliveryNum                String
  deliveryInstructions       String?
  tenantId                   String?
  customerId                 String?
  warehouses                 Warehouse[]
  orders                     Order[]
  country                    Country      @relation(fields: [countryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  state                      State        @relation(fields: [stateId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tenant                     Tenant?      @relation(fields: [tenantId], references: [id])
  customer                   Customer?    @relation(fields: [customerId], references: [id])
  defaultShippingForTenant   Tenant?      @relation("TenantDefaultShippingAddress")
  defaultBillingForTenant    Tenant?      @relation("TenantDefaultBillingAddress")
  defaultShippingForCustomer Customer?    @relation("CustomerDefaultShippingAddress")
  defaultBillingForCustomer  Customer?    @relation("CustomerDefaultBillingAddress")

  @@unique([tenantId, name])
  @@unique([customerId, name])
  @@schema("common")
}

enum AddressTypes {
  SHIPPING
  BILLING
  WAREHOUSE

  @@schema("common")
}

model AuthIdentity {
  id             String      @id
  email          String
  password       String
  accountType    AccountType
  isActive       Boolean     @default(true)
  emailVerified  Boolean     @default(false)
  lastLoginAt    DateTime?
  failedAttempts Int         @default(0)
  lockedUntil    DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  tenant         Tenant?     @relation("TenantAuth")
  customer       Customer?   @relation("CustomerAuth")
  employee       Employee?   @relation("EmployeeAuth")

  @@index([email, accountType])
  @@schema("common")
}

enum AccountType {
  TENANT
  CUSTOMER
  EMPLOYEE

  @@schema("common")
}

// Geography schema models
model Country {
  id             String         @id
  name           String         @unique
  code           String         @unique
  states         State[]
  addresses      Address[]
  taxRates       TaxRate[]
  shippmentRates ShipmentRate[]

  @@schema("geography")
}

model State {
  id             String         @id
  name           String
  code           String
  countryId      String
  addresses      Address[]
  taxRates       TaxRate[]
  shippmentRates ShipmentRate[]
  country        Country        @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@schema("geography")
}
